#!/usr/bin/env php
<?php

use Webgraphe\Phollow\Application;
use Webgraphe\Phollow\Configuration;
use Webgraphe\Phollow\ParameterBag;

if (defined('PHP_WINDOWS_VERSION_MAJOR')) {
    echo "Webgraphe Phollow relies on Unix sockets and is therefore not compatible natively on Windows machines." . PHP_EOL;

    die(1);
}

error_reporting(E_ALL);
ini_set('display_errors', true);

if (version_compare('5.6.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        sprintf(
            'This version of Webgraphe Phollow is supported on PHP 5.6+' . PHP_EOL .
            'You are using PHP %s (%s).' . PHP_EOL,
            PHP_VERSION,
            PHP_BINARY
        )
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (array(
             __DIR__ . '/../../autoload.php',
             __DIR__ . '/../vendor/autoload.php',
             __DIR__ . '/vendor/autoload.php'
         ) as $file) {
    if (file_exists($file)) {
        define('PHOLLOW_VENDOR_AUTOLOAD', $file);

        break;
    }
}

unset($file);

if (!defined('PHOLLOW_VENDOR_AUTOLOAD')) {
    fwrite(
        STDERR,
        implode(
            PHP_EOL,
            [
                'You need to set up the project dependencies using Composer:',
                null,
                '    composer install',
                null,
                'You can learn all about Composer on https://getcomposer.org/.',
                null
            ]
        )
    );

    die(1);
}

/** @noinspection PhpIncludeInspection */
require PHOLLOW_VENDOR_AUTOLOAD;

try {
    $bag = ParameterBag::fromGlobals();
    $action = $bag->getArgument(0);

    if (!$action || 'help' === $action) {
        die(Application::usage());
    }

    if ('generate-configuration' === $action) {
        die((new Configuration)->toIni() . PHP_EOL);
    }

    $overrides = [];
    if ($bag->hasOption('colors')) {
        $overrides['colors'] = true;
    }

    if ($bag->hasOption('no-configuration') || !file_exists(Configuration::DEFAULT_INI_FILE)) {
        $configuration = Configuration::fromArray($overrides);
    } else {
        $configuration = Configuration::fromIniFile(
            $bag->getOption('configuration-file', Configuration::DEFAULT_INI_FILE),
            $overrides
        );
    }

    if ('run' === $action) {
        $app = Application::create($configuration);
        $app->run();

        die(0);
    }

    throw new \Exception("Unknown action '$action'");
} catch (\Exception $e) {
    echo $e->getMessage() . PHP_EOL;
    echo $e->getTraceAsString() . PHP_EOL;

    die(1);
}
